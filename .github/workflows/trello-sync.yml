name: Trello Sync
on:
  pull_request:
    types: [opened, synchronize, closed]
  push:
    branches: [main, master, develop]

jobs:
  sync-trello:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Extract Trello Card ID
        id: extract
        run: |
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          PR_TITLE="${{ github.event.pull_request.title || '' }}"
          CARD_ID=$(echo "$BRANCH_NAME $PR_TITLE" | grep -oiE 'CH-[0-9]+' | head -1 | tr '[:lower:]' '[:upper:]')

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "card_id=$CARD_ID" >> $GITHUB_OUTPUT
          echo "action=${{ github.event.action || 'push' }}" >> $GITHUB_OUTPUT
          echo "is_merged=${{ github.event.pull_request.merged || false }}" >> $GITHUB_OUTPUT

          if [ -n "$CARD_ID" ]; then
            echo "‚úÖ Found Trello card: $CARD_ID"
          else
            echo "‚ùå No Trello card ID found in branch name or PR title"
            echo "Branch: $BRANCH_NAME"
            echo "PR Title: $PR_TITLE"
          fi

      - name: Verify Trello Card Exists
        if: steps.extract.outputs.card_id
        id: verify_card
        run: |
          CARD_ID="${{ steps.extract.outputs.card_id }}"

          if [[ ! "$CARD_ID" =~ ^CH-[0-9]+$ ]]; then
            echo "card_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Invalid card ID format: $CARD_ID (expected: CH-123)"
            exit 0
          fi

          echo "üîç Searching for cards with pattern: [$CARD_ID]"
          SEARCH_QUERY="%5B${CARD_ID}%5D"

          HTTP_STATUS=$(curl -s -o /tmp/trello_search.json -w "%{http_code}" \
            "https://api.trello.com/1/search?query=${SEARCH_QUERY}&key=${{ secrets.TRELLO_API_KEY }}&token=${{ secrets.TRELLO_TOKEN }}&cards_limit=50")

          echo "üîç Search HTTP Status: $HTTP_STATUS"

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "üìã Search results:"
            jq -r '.cards[]? | .name' /tmp/trello_search.json | head -5
            
            REAL_CARD_ID=$(jq -r --arg pattern "\\[$CARD_ID\\]" '.cards[] | select(.name | test($pattern; "i")) | .id' /tmp/trello_search.json | head -1)
            
            if [ -n "$REAL_CARD_ID" ] && [ "$REAL_CARD_ID" != "null" ] && [ "$REAL_CARD_ID" != "" ]; then
              CARD_NAME=$(jq -r --arg pattern "\\[$CARD_ID\\]" '.cards[] | select(.name | test($pattern; "i")) | .name' /tmp/trello_search.json | head -1)
              LIST_ID=$(jq -r --arg pattern "\\[$CARD_ID\\]" '.cards[] | select(.name | test($pattern; "i")) | .idList' /tmp/trello_search.json | head -1)
              BOARD_ID=$(jq -r --arg pattern "\\[$CARD_ID\\]" '.cards[] | select(.name | test($pattern; "i")) | .idBoard' /tmp/trello_search.json | head -1)
              
              echo "card_exists=true" >> $GITHUB_OUTPUT
              echo "real_card_id=$REAL_CARD_ID" >> $GITHUB_OUTPUT
              echo "card_name=$CARD_NAME" >> $GITHUB_OUTPUT
              echo "list_id=$LIST_ID" >> $GITHUB_OUTPUT
              echo "board_id=$BOARD_ID" >> $GITHUB_OUTPUT
              echo "‚úÖ Card found: $CARD_NAME"
              echo "üìã Real Card ID: $REAL_CARD_ID"
            else
              echo "card_exists=false" >> $GITHUB_OUTPUT
              echo "‚ùå No card found with pattern [$CARD_ID]"
              echo "üìã Available cards in search results:"
              jq -r '.cards[]? | "- \(.name)"' /tmp/trello_search.json 2>/dev/null | head -10 || echo "No cards found"
            fi
          else
            echo "card_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Search failed (HTTP $HTTP_STATUS)"
            if [ -f /tmp/trello_search.json ]; then
              echo "Response content:"
              cat /tmp/trello_search.json
            fi
          fi

      - name: Update Card Description on PR Opened
        if: steps.verify_card.outputs.card_exists == 'true' && steps.extract.outputs.action == 'opened'
        continue-on-error: true
        run: |
          CARD_ID="${{ steps.extract.outputs.card_id }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          BRANCH_NAME="${{ github.head_ref }}"
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')

          # Create description with proper escaping
          DESCRIPTION="üîó Pull Request: $PR_URL\n\nüìã Status: Em Review\nüåø Branch: $BRANCH_NAME\nüë§ Autor: @$PR_AUTHOR\n‚è∞ Aberto em: $TIMESTAMP"

          HTTP_STATUS=$(curl -s -o /tmp/update_response.json -w "%{http_code}" \
            -X PUT "https://api.trello.com/1/cards/$REAL_CARD_ID" \
            -d "key=${{ secrets.TRELLO_API_KEY }}" \
            -d "token=${{ secrets.TRELLO_TOKEN }}" \
            --data-urlencode "desc=$DESCRIPTION")

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Card description updated successfully"
          else
            echo "‚ùå Failed to update card description (HTTP $HTTP_STATUS)"
            cat /tmp/update_response.json
          fi

      - name: Move Card to Done on PR Merged
        if: steps.verify_card.outputs.card_exists == 'true' && steps.extract.outputs.is_merged == 'true'
        continue-on-error: true
        run: |
          CARD_ID="${{ steps.extract.outputs.card_id }}"
          BOARD_ID="${{ steps.verify_card.outputs.board_id }}"

          echo "üîÑ Attempting to move card to Done list..."

          LISTS_RESPONSE=$(curl -s \
            "https://api.trello.com/1/boards/$BOARD_ID/lists?key=${{ secrets.TRELLO_API_KEY }}&token=${{ secrets.TRELLO_TOKEN }}")

          if echo "$LISTS_RESPONSE" | jq -e '.' >/dev/null 2>&1; then
            echo "üìã Available lists:"
            echo "$LISTS_RESPONSE" | jq -r '.[].name' | sort
            
            DONE_LIST_ID=$(echo "$LISTS_RESPONSE" | jq -r '.[] | select(.name | test("^(Done|Conclu√≠do|Finalizado|Complete|Terminado|Finished)$"; "i")) | .id' | head -1)
            
            if [ -n "$DONE_LIST_ID" ] && [ "$DONE_LIST_ID" != "null" ]; then
              echo "‚úÖ Found Done list: $DONE_LIST_ID"
              
              HTTP_STATUS=$(curl -s -o /tmp/move_response.json -w "%{http_code}" \
                -X PUT "https://api.trello.com/1/cards/$REAL_CARD_ID" \
                -d "key=${{ secrets.TRELLO_API_KEY }}" \
                -d "token=${{ secrets.TRELLO_TOKEN }}" \
                -d "idList=$DONE_LIST_ID")
              
              if [ "$HTTP_STATUS" = "200" ]; then
                echo "‚úÖ Card moved to Done list successfully"
              else
                echo "‚ùå Failed to move card (HTTP $HTTP_STATUS)"
                if [ -f /tmp/move_response.json ]; then
                  cat /tmp/move_response.json
                fi
              fi
            else
              echo "‚ùå Done list not found."
              echo "üí° Create a list named 'Done', 'Conclu√≠do', or 'Finalizado' to enable auto-moving"
            fi
          else
            echo "‚ùå Done list not found. Available lists:"
            echo "$LISTS_RESPONSE" | jq -r '.[].name'
          fi

      - name: Add Comment on PR Merged
        if: steps.verify_card.outputs.card_exists == 'true' && steps.extract.outputs.is_merged == 'true'
        continue-on-error: true
        run: |
          CARD_ID="${{ steps.extract.outputs.card_id }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          MERGE_COMMIT="${{ github.event.pull_request.merge_commit_sha }}"
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')

          COMMENT_TEXT="üéâ Pull Request Merged!\n\n‚úÖ PR: $PR_URL\nüîÑ Merge commit: ${MERGE_COMMIT:0:7}\n‚è∞ Merged at: $TIMESTAMP"

          HTTP_STATUS=$(curl -s -o /tmp/comment_response.json -w "%{http_code}" \
            -X POST "https://api.trello.com/1/cards/$REAL_CARD_ID/actions/comments" \
            -d "key=${{ secrets.TRELLO_API_KEY }}" \
            -d "token=${{ secrets.TRELLO_TOKEN }}" \
            --data-urlencode "text=$COMMENT_TEXT")

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Merge comment added successfully"
          else
            echo "‚ùå Failed to add comment (HTTP $HTTP_STATUS)"
            cat /tmp/comment_response.json
          fi

      - name: Add Comment on PR Closed (Not Merged)
        if: steps.verify_card.outputs.card_exists == 'true' && steps.extract.outputs.action == 'closed' && steps.extract.outputs.is_merged == 'false'
        continue-on-error: true
        run: |
          CARD_ID="${{ steps.extract.outputs.card_id }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')

          COMMENT_TEXT="‚ùå Pull Request Fechado (N√£o Merged)\n\nüîó PR: $PR_URL\n‚è∞ Fechado em: $TIMESTAMP\n\nüí° O trabalho pode precisar ser retomado ou reorganizado."

          HTTP_STATUS=$(curl -s -o /tmp/comment_response.json -w "%{http_code}" \
            -X POST "https://api.trello.com/1/cards/$REAL_CARD_ID/actions/comments" \
            -d "key=${{ secrets.TRELLO_API_KEY }}" \
            -d "token=${{ secrets.TRELLO_TOKEN }}" \
            --data-urlencode "text=$COMMENT_TEXT")

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Closure comment added successfully"
          else
            echo "‚ùå Failed to add comment (HTTP $HTTP_STATUS)"
            cat /tmp/comment_response.json
          fi

      - name: Add Deploy Comment on Push to Main
        if: steps.verify_card.outputs.card_exists == 'true' && (contains(github.ref, 'refs/heads/main') || contains(github.ref, 'refs/heads/master'))
        continue-on-error: true
        run: |
          CARD_ID="${{ steps.extract.outputs.card_id }}"
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')

          COMMENT_TEXT="üöÄ Deploy Realizado!\n\nüîÑ Commit: ${COMMIT_SHA:0:7}\nüîó Ver commit: $COMMIT_URL\n‚è∞ Deploy em: $TIMESTAMP\nüåê Branch: ${{ github.ref_name }}"

          HTTP_STATUS=$(curl -s -o /tmp/comment_response.json -w "%{http_code}" \
            -X POST "https://api.trello.com/1/cards/$REAL_CARD_ID/actions/comments" \
            -d "key=${{ secrets.TRELLO_API_KEY }}" \
            -d "token=${{ secrets.TRELLO_TOKEN }}" \
            --data-urlencode "text=$COMMENT_TEXT")

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Deploy comment added successfully"
          else
            echo "‚ùå Failed to add deploy comment (HTTP $HTTP_STATUS)"
            cat /tmp/comment_response.json
          fi

      - name: Debug Trello API (if card not found)
        if: steps.extract.outputs.card_id != '' && steps.verify_card.outputs.card_exists != 'true'
        continue-on-error: true
        run: |
          echo "üîç Debugging Trello API access..."

          HTTP_STATUS=$(curl -s -o /tmp/trello_me.json -w "%{http_code}" \
            "https://api.trello.com/1/members/me?key=${{ secrets.TRELLO_API_KEY }}&token=${{ secrets.TRELLO_TOKEN }}")

          if [ "$HTTP_STATUS" = "200" ]; then
            MEMBER_NAME=$(jq -r '.fullName // .username // "Unknown"' /tmp/trello_me.json)
            echo "‚úÖ API connection successful - Logged in as: $MEMBER_NAME"
            
            echo "üìã Testing board access..."
            BOARDS_STATUS=$(curl -s -o /tmp/trello_boards.json -w "%{http_code}" \
              "https://api.trello.com/1/members/me/boards?key=${{ secrets.TRELLO_API_KEY }}&token=${{ secrets.TRELLO_TOKEN }}")
            
            if [ "$BOARDS_STATUS" = "200" ]; then
              echo "Accessible boards:"
              jq -r '.[] | "- \(.name) (ID: \(.id))"' /tmp/trello_boards.json | head -5
              
              echo ""
              echo "üí° Troubleshooting tips:"
              echo "1. Ensure your card name contains exactly [${{ steps.extract.outputs.card_id }}]"
              echo "2. Check if the card is in one of the boards listed above"
              echo "3. Make sure the board is not archived"
            else
              echo "‚ùå Failed to list boards (HTTP $BOARDS_STATUS)"
            fi
          else
            echo "‚ùå API connection failed (HTTP $HTTP_STATUS)"
            echo "Check your TRELLO_API_KEY and TRELLO_TOKEN secrets"
            if [ -f /tmp/trello_me.json ]; then
              cat /tmp/trello_me.json
            fi
          fi

      - name: Workflow Summary
        if: always()
        run: |
          echo ""
          echo "=== TRELLO SYNC SUMMARY ==="
          echo "Card ID: ${{ steps.extract.outputs.card_id || 'Not found' }}"
          echo "Card Exists: ${{ steps.verify_card.outputs.card_exists || 'Not checked' }}"
          echo "Card Name: ${{ steps.verify_card.outputs.card_name || 'N/A' }}"
          echo "Action: ${{ steps.extract.outputs.action }}"
          echo "Is Merged: ${{ steps.extract.outputs.is_merged }}"
          echo "Branch: ${{ steps.extract.outputs.branch_name }}"
          echo ""
          echo "üîç Event Details:"
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo ""
          if [ "${{ steps.verify_card.outputs.card_exists }}" = "true" ]; then
            echo "‚úÖ Trello integration executed successfully"
          else
            echo "‚ùå Trello integration skipped (card not found or pattern missing)"
          fi
          echo "=========================="
