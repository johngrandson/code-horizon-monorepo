name: Trello Sync
on:
  pull_request:
    types: [opened, synchronize, closed]
  push:
    branches: [main, master, develop]

jobs:
  sync-trello:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Extract Trello Card ID
        id: extract
        run: |
          # Extract branch name and PR title
          BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
          PR_TITLE="${{ github.event.pull_request.title || '' }}"

          # Search for CH-123 pattern in branch or title (case insensitive)
          CARD_ID=$(echo "$BRANCH_NAME $PR_TITLE" | grep -oiE 'CH-[0-9]+' | head -1 | tr '[:lower:]' '[:upper:]')

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "card_id=$CARD_ID" >> $GITHUB_OUTPUT
          echo "action=${{ github.event.action || 'push' }}" >> $GITHUB_OUTPUT
          echo "is_merged=${{ github.event.pull_request.merged || false }}" >> $GITHUB_OUTPUT

          if [ -n "$CARD_ID" ]; then
            echo "‚úÖ Found Trello card pattern: $CARD_ID"
          else
            echo "‚ùå No Trello card ID found in branch name or PR title"
            echo "Branch: $BRANCH_NAME"
            echo "PR Title: $PR_TITLE"
          fi

      - name: Search and Verify Trello Card
        if: steps.extract.outputs.card_id != ''
        id: verify_card
        run: |
          CARD_ID="${{ steps.extract.outputs.card_id }}"

          # Validate card ID format
          if [[ ! "$CARD_ID" =~ ^CH-[0-9]+$ ]]; then
            echo "card_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Invalid card ID format: $CARD_ID (expected: CH-123)"
            exit 0
          fi

          # Search for card by name pattern using Trello search API
          SEARCH_QUERY="[$CARD_ID]"
          ENCODED_QUERY=$(echo "$SEARCH_QUERY" | jq -rR @uri)

          echo "üîç Searching for cards with pattern: $SEARCH_QUERY"

          HTTP_STATUS=$(curl -s -o /tmp/trello_search.json -w "%{http_code}" \
            "https://api.trello.com/1/search?query=${ENCODED_QUERY}&key=${{ secrets.TRELLO_API_KEY }}&token=${{ secrets.TRELLO_TOKEN }}&cards_limit=10")

          echo "üîç Search HTTP Status: $HTTP_STATUS"

          if [ "$HTTP_STATUS" = "200" ]; then
            # Find the card with exact pattern match (case insensitive)
            CARD_JSON=$(jq -r --arg pattern "\\[$CARD_ID\\]" '
              .cards[] | 
              select(.name | test($pattern; "i")) | 
              {id, name, idList, idBoard} | 
              @base64
            ' /tmp/trello_search.json | head -1)
            
            if [ -n "$CARD_JSON" ] && [ "$CARD_JSON" != "null" ] && [ "$CARD_JSON" != "" ]; then
              # Decode and extract card information
              CARD_DATA=$(echo "$CARD_JSON" | base64 -d)
              REAL_CARD_ID=$(echo "$CARD_DATA" | jq -r '.id')
              CARD_NAME=$(echo "$CARD_DATA" | jq -r '.name')
              LIST_ID=$(echo "$CARD_DATA" | jq -r '.idList')
              BOARD_ID=$(echo "$CARD_DATA" | jq -r '.idBoard')
              
              # Escape special characters for GitHub outputs
              CARD_NAME_ESCAPED=$(echo "$CARD_NAME" | sed 's/"/\\"/g' | sed "s/'/\\'/g")
              
              echo "card_exists=true" >> $GITHUB_OUTPUT
              echo "real_card_id=$REAL_CARD_ID" >> $GITHUB_OUTPUT
              echo "card_name=$CARD_NAME_ESCAPED" >> $GITHUB_OUTPUT
              echo "list_id=$LIST_ID" >> $GITHUB_OUTPUT
              echo "board_id=$BOARD_ID" >> $GITHUB_OUTPUT
              echo "‚úÖ Card found: $CARD_NAME"
              echo "üìã Real Card ID: $REAL_CARD_ID"
            else
              echo "card_exists=false" >> $GITHUB_OUTPUT
              echo "‚ùå No card found with pattern [$CARD_ID]"
              
              # Show available cards for debugging
              echo "üìã Available cards in search results:"
              jq -r '.cards[]? | "- \(.name)"' /tmp/trello_search.json 2>/dev/null || echo "No cards found"
            fi
          else
            echo "card_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Search failed (HTTP $HTTP_STATUS)"
            
            if [ -f /tmp/trello_search.json ]; then
              ERROR_MSG=$(jq -r '.error // ""' /tmp/trello_search.json 2>/dev/null)
              if [ -n "$ERROR_MSG" ] && [ "$ERROR_MSG" != "null" ] && [ "$ERROR_MSG" != "" ]; then
                echo "Trello API Error: $ERROR_MSG"
              else
                echo "Response: $(cat /tmp/trello_search.json)"
              fi
            fi
          fi

      - name: Update Card on PR Opened
        if: steps.verify_card.outputs.card_exists == 'true' && steps.extract.outputs.action == 'opened'
        run: |
          REAL_CARD_ID="${{ steps.verify_card.outputs.real_card_id }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          BRANCH_NAME="${{ github.head_ref }}"

          # Create formatted description with proper URL encoding
          DESCRIPTION="üîó **Pull Request:** $PR_URL%0A%0Aüìã **Status:** Em Review%0Aüåø **Branch:** \`$BRANCH_NAME\`%0Aüë§ **Autor:** @$PR_AUTHOR%0A‚è∞ **Aberto em:** $(date -u '+%Y-%m-%d %H:%M UTC')"

          # Update card description using correct Trello API endpoint
          HTTP_STATUS=$(curl -s -o /tmp/update_response.json -w "%{http_code}" \
            -X PUT "https://api.trello.com/1/cards/$REAL_CARD_ID" \
            -G \
            -d "key=${{ secrets.TRELLO_API_KEY }}" \
            -d "token=${{ secrets.TRELLO_TOKEN }}" \
            -d "desc=$DESCRIPTION")

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Card description updated successfully"
          else
            echo "‚ùå Failed to update card description (HTTP $HTTP_STATUS)"
            if [ -f /tmp/update_response.json ]; then
              cat /tmp/update_response.json
            fi
          fi

      - name: Move Card to Done on PR Merged
        if: steps.verify_card.outputs.card_exists == 'true' && steps.extract.outputs.is_merged == 'true'
        run: |
          REAL_CARD_ID="${{ steps.verify_card.outputs.real_card_id }}"
          BOARD_ID="${{ steps.verify_card.outputs.board_id }}"

          # Get all lists from the board using correct Trello API endpoint
          LISTS_RESPONSE=$(curl -s \
            "https://api.trello.com/1/boards/$BOARD_ID/lists?key=${{ secrets.TRELLO_API_KEY }}&token=${{ secrets.TRELLO_TOKEN }}")

          # Check if API call was successful
          if echo "$LISTS_RESPONSE" | jq -e '.' >/dev/null 2>&1; then
            # Find "Done" list (case insensitive, multiple language support)
            DONE_LIST_ID=$(echo "$LISTS_RESPONSE" | jq -r '.[] | select(.name | test("^(Done|Conclu√≠do|Finalizado|Complete|Terminado|Finished)$"; "i")) | .id' | head -1)

            if [ -n "$DONE_LIST_ID" ] && [ "$DONE_LIST_ID" != "null" ]; then
              # Move card to Done list using correct Trello API endpoint
              HTTP_STATUS=$(curl -s -o /tmp/move_response.json -w "%{http_code}" \
                -X PUT "https://api.trello.com/1/cards/$REAL_CARD_ID" \
                -G \
                -d "key=${{ secrets.TRELLO_API_KEY }}" \
                -d "token=${{ secrets.TRELLO_TOKEN }}" \
                -d "idList=$DONE_LIST_ID")
              
              if [ "$HTTP_STATUS" = "200" ]; then
                echo "‚úÖ Card moved to Done list successfully"
              else
                echo "‚ùå Failed to move card (HTTP $HTTP_STATUS)"
                if [ -f /tmp/move_response.json ]; then
                  cat /tmp/move_response.json
                fi
              fi
            else
              echo "‚ùå Done list not found. Available lists:"
              echo "$LISTS_RESPONSE" | jq -r '.[].name' | sort
              echo ""
              echo "üí° Create a list named 'Done', 'Conclu√≠do', or 'Finalizado' to enable auto-moving"
            fi
          else
            echo "‚ùå Failed to fetch board lists"
            echo "Response: $LISTS_RESPONSE"
          fi

      - name: Add Comment on PR Merged
        if: steps.verify_card.outputs.card_exists == 'true' && steps.extract.outputs.is_merged == 'true'
        run: |
          REAL_CARD_ID="${{ steps.verify_card.outputs.real_card_id }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          MERGE_COMMIT="${{ github.event.pull_request.merge_commit_sha }}"

          # Create comment text with proper URL encoding
          COMMENT_TEXT="üéâ **Pull Request Merged!**%0A%0A‚úÖ PR: $PR_URL%0AüîÑ Merge commit: \`${MERGE_COMMIT:0:7}\`%0A‚è∞ Merged at: $(date -u '+%Y-%m-%d %H:%M UTC')"

          # Add comment using correct Trello API endpoint
          HTTP_STATUS=$(curl -s -o /tmp/comment_response.json -w "%{http_code}" \
            -X POST "https://api.trello.com/1/cards/$REAL_CARD_ID/actions/comments" \
            -G \
            -d "key=${{ secrets.TRELLO_API_KEY }}" \
            -d "token=${{ secrets.TRELLO_TOKEN }}" \
            -d "text=$COMMENT_TEXT")

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Merge comment added successfully"
          else
            echo "‚ùå Failed to add comment (HTTP $HTTP_STATUS)"
            if [ -f /tmp/comment_response.json ]; then
              cat /tmp/comment_response.json
            fi
          fi

      - name: Add Comment on PR Closed (Not Merged)
        if: steps.verify_card.outputs.card_exists == 'true' && steps.extract.outputs.action == 'closed' && steps.extract.outputs.is_merged == 'false'
        run: |
          REAL_CARD_ID="${{ steps.verify_card.outputs.real_card_id }}"
          PR_URL="${{ github.event.pull_request.html_url }}"

          # Create comment text with proper URL encoding
          COMMENT_TEXT="‚ùå **Pull Request Fechado (N√£o Merged)**%0A%0Aüîó PR: $PR_URL%0A‚è∞ Fechado em: $(date -u '+%Y-%m-%d %H:%M UTC')%0A%0Aüí° O trabalho pode precisar ser retomado ou reorganizado."

          # Add comment using correct Trello API endpoint
          HTTP_STATUS=$(curl -s -o /tmp/comment_response.json -w "%{http_code}" \
            -X POST "https://api.trello.com/1/cards/$REAL_CARD_ID/actions/comments" \
            -G \
            -d "key=${{ secrets.TRELLO_API_KEY }}" \
            -d "token=${{ secrets.TRELLO_TOKEN }}" \
            -d "text=$COMMENT_TEXT")

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Closure comment added successfully"
          else
            echo "‚ùå Failed to add comment (HTTP $HTTP_STATUS)"
            if [ -f /tmp/comment_response.json ]; then
              cat /tmp/comment_response.json
            fi
          fi

      - name: Add Deploy Comment on Push to Main
        if: steps.verify_card.outputs.card_exists == 'true' && (contains(github.ref, 'refs/heads/main') || contains(github.ref, 'refs/heads/master'))
        run: |
          REAL_CARD_ID="${{ steps.verify_card.outputs.real_card_id }}"
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"

          # Create comment text with proper URL encoding and markdown links
          COMMENT_TEXT="üöÄ **Deploy Realizado!**%0A%0AüîÑ Commit: [\`${COMMIT_SHA:0:7}\`]($COMMIT_URL)%0A‚è∞ Deploy em: $(date -u '+%Y-%m-%d %H:%M UTC')%0Aüåê Branch: ${{ github.ref_name }}"

          # Add comment using correct Trello API endpoint
          HTTP_STATUS=$(curl -s -o /tmp/comment_response.json -w "%{http_code}" \
            -X POST "https://api.trello.com/1/cards/$REAL_CARD_ID/actions/comments" \
            -G \
            -d "key=${{ secrets.TRELLO_API_KEY }}" \
            -d "token=${{ secrets.TRELLO_TOKEN }}" \
            -d "text=$COMMENT_TEXT")

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Deploy comment added successfully"
          else
            echo "‚ùå Failed to add deploy comment (HTTP $HTTP_STATUS)"
            if [ -f /tmp/comment_response.json ]; then
              cat /tmp/comment_response.json
            fi
          fi

      - name: Workflow Summary
        if: always()
        run: |
          echo "=== TRELLO SYNC SUMMARY ==="
          echo "Pattern ID: ${{ steps.extract.outputs.card_id || 'Not found' }}"
          echo "Card Exists: ${{ steps.verify_card.outputs.card_exists || 'Not checked' }}"
          echo "Real Card ID: ${{ steps.verify_card.outputs.real_card_id || 'N/A' }}"
          echo "Card Name: ${{ steps.verify_card.outputs.card_name || 'N/A' }}"
          echo "Action: ${{ steps.extract.outputs.action }}"
          echo "Is Merged: ${{ steps.extract.outputs.is_merged }}"
          echo "Branch: ${{ steps.extract.outputs.branch_name }}"
          echo "=========================="
