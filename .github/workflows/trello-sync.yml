name: Trello Sync
on:
  pull_request:
    types: [opened, synchronize, closed]
  push:
    branches: [main, master, develop]

jobs:
  sync-trello:
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Extract Card Info
        id: extract
        run: |
          # Extract card ID from branch name or PR title
          BRANCH="${{ github.head_ref || github.ref_name }}"
          PR_TITLE="${{ github.event.pull_request.title || '' }}"
          CARD_ID=$(echo "$BRANCH $PR_TITLE" | grep -oiE 'CH-[0-9]+' | head -1 | tr '[:lower:]' '[:upper:]')

          if [ -z "$CARD_ID" ]; then
            echo "::notice::No Trello card ID found (expected format: CH-123)"
            echo "found=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "::notice::Found Trello card: $CARD_ID"
          echo "found=true" >> $GITHUB_OUTPUT
          echo "card_id=$CARD_ID" >> $GITHUB_OUTPUT
          echo "is_pr=${{ github.event_name == 'pull_request' }}" >> $GITHUB_OUTPUT
          echo "is_merged=${{ github.event.pull_request.merged || false }}" >> $GITHUB_OUTPUT

      - name: Find Card in Trello
        if: steps.extract.outputs.found == 'true'
        id: find_card
        run: |
          CARD_ID="${{ steps.extract.outputs.card_id }}"
          API_KEY="${{ secrets.TRELLO_API_KEY }}"
          TOKEN="${{ secrets.TRELLO_TOKEN }}"

          # Search for card with pattern [CH-XXX]
          SEARCH_QUERY="%5B${CARD_ID}%5D"
          RESPONSE=$(curl -s "https://api.trello.com/1/search?query=${SEARCH_QUERY}&key=${API_KEY}&token=${TOKEN}&cards_limit=10")

          # Extract card details
          REAL_ID=$(echo "$RESPONSE" | jq -r --arg pattern "\\[$CARD_ID\\]" '.cards[] | select(.name | test($pattern; "i")) | .id' | head -1)

          if [ -z "$REAL_ID" ] || [ "$REAL_ID" = "null" ]; then
            echo "::error::Card [$CARD_ID] not found in Trello"
            echo "exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get card details
          CARD_NAME=$(echo "$RESPONSE" | jq -r --arg id "$REAL_ID" '.cards[] | select(.id == $id) | .name')
          LIST_ID=$(echo "$RESPONSE" | jq -r --arg id "$REAL_ID" '.cards[] | select(.id == $id) | .idList')
          BOARD_ID=$(echo "$RESPONSE" | jq -r --arg id "$REAL_ID" '.cards[] | select(.id == $id) | .idBoard')

          echo "::notice::Found card: $CARD_NAME"
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "real_id=$REAL_ID" >> $GITHUB_OUTPUT
          echo "board_id=$BOARD_ID" >> $GITHUB_OUTPUT

      - name: Update Card on PR Opened
        if: |
          steps.find_card.outputs.exists == 'true' && 
          github.event.action == 'opened'
        run: |
          CARD_ID="${{ steps.find_card.outputs.real_id }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          AUTHOR="${{ github.event.pull_request.user.login }}"
          BRANCH="${{ github.head_ref }}"

          DESCRIPTION="**üîó Pull Request:** $PR_URL

          **üìã Status:** In Review  
          **üåø Branch:** $BRANCH  
          **üë§ Author:** @$AUTHOR  
          **‚è∞ Opened:** $(date -u '+%Y-%m-%d %H:%M UTC')"

          curl -s -X PUT "https://api.trello.com/1/cards/$CARD_ID" \
            -d "key=${{ secrets.TRELLO_API_KEY }}" \
            -d "token=${{ secrets.TRELLO_TOKEN }}" \
            --data-urlencode "desc=$DESCRIPTION" \
            -o /dev/null -w "Update card description: %{http_code}\n"

      - name: Move Card to Done on Merge
        if: |
          steps.find_card.outputs.exists == 'true' && 
          steps.extract.outputs.is_merged == 'true'
        run: |
          CARD_ID="${{ steps.find_card.outputs.real_id }}"
          BOARD_ID="${{ steps.find_card.outputs.board_id }}"
          API_KEY="${{ secrets.TRELLO_API_KEY }}"
          TOKEN="${{ secrets.TRELLO_TOKEN }}"

          # Get board lists
          LISTS=$(curl -s "https://api.trello.com/1/boards/$BOARD_ID/lists?key=$API_KEY&token=$TOKEN")

          # Find Done list (case insensitive)
          DONE_LIST_ID=$(echo "$LISTS" | jq -r '.[] | select(.name | test("^(Done|Conclu√≠do|Finalizado|Complete|Finished)$"; "i")) | .id' | head -1)

          if [ -n "$DONE_LIST_ID" ] && [ "$DONE_LIST_ID" != "null" ]; then
            curl -s -X PUT "https://api.trello.com/1/cards/$CARD_ID" \
              -d "key=$API_KEY" \
              -d "token=$TOKEN" \
              -d "idList=$DONE_LIST_ID" \
              -o /dev/null -w "Move card to Done: %{http_code}\n"
          else
            echo "::warning::Done list not found. Create a list named 'Done' to enable auto-moving"
          fi

      - name: Add Comment
        if: steps.find_card.outputs.exists == 'true'
        run: |
          CARD_ID="${{ steps.find_card.outputs.real_id }}"
          API_KEY="${{ secrets.TRELLO_API_KEY }}"
          TOKEN="${{ secrets.TRELLO_TOKEN }}"

          # Determine comment text based on event
          if [ "${{ steps.extract.outputs.is_merged }}" = "true" ]; then
            TEXT="üéâ **Pull Request Merged!**

            **‚úÖ PR:** ${{ github.event.pull_request.html_url }}  
            **üîÑ Commit:** ${{ github.sha }}  
            **‚è∞ Merged:** $(date -u '+%Y-%m-%d %H:%M UTC')"
            elif [ "${{ github.event.action }}" = "closed" ]; then
              TEXT="‚ùå **Pull Request Closed (Not Merged)**

            **üîó PR:** ${{ github.event.pull_request.html_url }}  
            **‚è∞ Closed:** $(date -u '+%Y-%m-%d %H:%M UTC')"
            elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" =~ main|master ]]; then
              TEXT="üöÄ **Deployed to Production!**

            **üîÑ Commit:** ${{ github.sha }}  
            **üåê Branch:** ${{ github.ref_name }}  
            **‚è∞ Deployed:** $(date -u '+%Y-%m-%d %H:%M UTC')"
            else
              exit 0
            fi

          curl -s -X POST "https://api.trello.com/1/cards/$CARD_ID/actions/comments" \
            -d "key=$API_KEY" \
            -d "token=$TOKEN" \
            --data-urlencode "text=$TEXT" \
            -o /dev/null -w "Add comment: %{http_code}\n"

      - name: Debug API Access
        if: |
          steps.extract.outputs.found == 'true' && 
          steps.find_card.outputs.exists != 'true' && 
          failure()
        run: |
          API_KEY="${{ secrets.TRELLO_API_KEY }}"
          TOKEN="${{ secrets.TRELLO_TOKEN }}"

          echo "### API Debug ###"

          # Test API credentials
          ME=$(curl -s "https://api.trello.com/1/members/me?key=$API_KEY&token=$TOKEN")
          if echo "$ME" | jq -e '.id' >/dev/null 2>&1; then
            echo "‚úÖ API credentials valid - User: $(echo "$ME" | jq -r '.fullName // .username')"
            
            # List accessible boards
            echo -e "\nüìã Accessible boards:"
            curl -s "https://api.trello.com/1/members/me/boards?key=$API_KEY&token=$TOKEN" | \
              jq -r '.[] | "- \(.name) (ID: \(.id})"' | head -5
              
            echo -e "\nüí° Make sure your card name contains [${{ steps.extract.outputs.card_id }}]"
          else
            echo "‚ùå Invalid API credentials. Check TRELLO_API_KEY and TRELLO_TOKEN secrets"
          fi

      - name: Delete Branch After Merge
        if: |
          steps.extract.outputs.is_merged == 'true' && 
          github.event.pull_request.head.repo.full_name == github.repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH="${{ github.event.pull_request.head.ref }}"

          # Skip protected branches
          [[ "$BRANCH" =~ ^(main|master|develop|staging|production)$ ]] && exit 0

          # Delete branch
          gh api -X DELETE "/repos/${{ github.repository }}/git/refs/heads/$BRANCH" \
            && echo "‚úÖ Branch deleted: $BRANCH" \
            || echo "‚ùå Failed to delete branch: $BRANCH"
